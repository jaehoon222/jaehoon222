#include <Servo.h>
#define PIN_SERVO 10
#define PIN_IR A0
#define PIN_LED 9

#define _DIST_TARGET 255
#define _DIST_MIN 95
#define _DIST_MAX 420

// Distance sensor 지수가동평균필터
#define _DIST_ALPHA 0.0

// Servo range
#define _DUTY_MIN 553
#define _DUTY_NEU 1578
#define _DUTY_MAX 2399

// Servo speed control
#define _SERVO_ANGLE 12
#define _SERVO_SPEED 30

// Event periods
#define _INTERVAL_DIST 5
#define _INTERVAL_SERVO 20
#define _INTERVAL_SERIAL 100
#define _INTERVAL_FILLTER 1

// PID parameters
#define _KP 0.0

float error_curr, error_prev, control, pterm, dterm, iterm;

Servo myservo;
int a, b; // unit: mm
int cnt=0;
float dist_cali_sum= 0;
float dist_raw = 0;
float control_angle;
float KP,KD;
float KI = 0;
float dist_target = 0;
unsigned long last_sampling_time_dist, last_sampling_time_servo, last_sampling_time_serial, last_sampling_time_fillter; // unit: ms
bool event_dist, event_servo, event_serial;
int duty_chg_per_interval;
int duty_target, duty_curr;
float pri_error,error;
float last_dist_raw=0;

void setup() {
  // put your setup code here, to run once:
  myservo.attach(PIN_SERVO);
  duty_target = duty_curr = 1370;
  myservo.writeMicroseconds(1370);
// initialize GPIO pins
  pinMode(PIN_LED,OUTPUT);
  digitalWrite(PIN_LED, 1);
  
// initialize serial port
  Serial.begin(57600);
  a = 50; //70;
  b = 370; //300;

  duty_chg_per_interval = (float)(_DUTY_MAX - _DUTY_MIN) * _SERVO_SPEED / 180 * _INTERVAL_SERVO / 1000;
  pri_error = ir_distance();
}

float ir_distance(void){ // return value unit: mm
  float val;
  float volt = float(analogRead(PIN_IR));
  val = ((6762.0/(volt-9.0))-4.0) * 10.0;
  
  return val;
}

void loop() {

  //dist_cali_sum += dist_cali;
  //cnt+=1;
  
  //if (cnt==10){
    
    //dist_cali_sum /= 10;
   
   
   unsigned long time_curr = millis();
  if(time_curr >= last_sampling_time_dist + _INTERVAL_DIST) {
        last_sampling_time_dist += _INTERVAL_DIST;
        event_dist = true;
  }
  if(time_curr >= last_sampling_time_servo + _INTERVAL_SERVO) {
        last_sampling_time_servo += _INTERVAL_SERVO;
        event_servo = true;
  }
  if(time_curr >= last_sampling_time_serial + _INTERVAL_SERIAL) {
        last_sampling_time_serial += _INTERVAL_SERIAL;
        event_serial = true;
  }
  if(event_dist) {
    event_dist = false;
    // get a distance reading from the USS
    float dist_raw = ir_distance();
    float dist_cali = dist_raw +45 ;
    dist_cali_sum += dist_cali;
  }
  
  if(event_servo) {
    event_servo = false;
// adjust servo position according to the USS read value
    dist_cali_sum /=4;
    KP = 100* ((dist_cali_sum -255)/160);
    error = dist_cali_sum - pri_error;
    KD = 6.2*error;
    KI += 0.0001* (dist_cali_sum -255);
    duty_target = 1370 - KP - KD + KI;
    if (duty_target > 1490) duty_target = 1490;;
    if (duty_target < 1250) duty_target = 1250;
    myservo.writeMicroseconds(duty_target);
    pri_error = dist_cali_sum;
    last_dist_raw = dist_cali_sum;
    dist_cali_sum=0;
  }
  
  if(event_serial) {
    event_serial = false;
// output the read value to the serial port
    //Serial.print(26.5);Serial.print("\t");
    //Serial.print(24.5);Serial.print("\t");
    Serial.print("IR:");
    Serial.print(last_dist_raw);
    Serial.print(",T:");
    Serial.print("255");
    Serial.print(",P:");
    Serial.print(map(KP,1250,1490,510,610));
    Serial.print(",D:");
    Serial.print(map(KD,1250,1490,510,610));
    Serial.print(",I:");
    Serial.print(map(KI,1250,1490,510,610));
    Serial.print(",DTT:");
    Serial.print(duty_target);
    Serial.print(",-G:");
    Serial.print("245");
    Serial.print(",+G:");
    Serial.print("265");
    Serial.print(",m:");
    Serial.print("0");
    Serial.print(",M:");
    Serial.println("800");
  }
   
   
   
   
    
  }
